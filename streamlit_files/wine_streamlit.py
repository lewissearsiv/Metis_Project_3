import sysprint("Python Version:", sys.version)import statisticsimport mathimport pandas as pdimport numpy as npimport matplotlibimport matplotlib.pyplot as pltimport seaborn as snsimport streamlit as stimport scipy.stats as scsfrom sklearn.linear_model import LogisticRegressionfrom sklearn.neighbors import KNeighborsClassifierfrom sklearn.model_selection import train_test_split, GridSearchCVfrom sklearn.preprocessing import OneHotEncoder, StandardScalerfrom sklearn.datasets import make_classificationfrom sklearn.metrics import plot_confusion_matrix, mean_squared_error, confusion_matrixfrom sklearn.metrics import roc_auc_score, roc_curve, accuracy_scorefrom sklearn.metrics import precision_score, recall_score, precision_recall_curve,f1_score, fbeta_scorefrom sklearn.naive_bayes import BernoulliNB, MultinomialNB, GaussianNBfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.svm import SVCimport xgboost as xgbimport pickleimport warningswarnings.filterwarnings('ignore')from ipynb.fs.full.word_finder_chard import word_finder_matrix################################################This is my random Forest classifier for wines################################################with open('chard_dataframe.pickle','rb') as read_file:    df_chard = pickle.load(read_file)binary_features = df_chard.iloc[:,10:]target = df_chard['country']X_train, X_test, y_train, y_test = train_test_split(binary_features, target, test_size=0.2, random_state=1)####################Fit Models#######################################knnknn = KNeighborsClassifier(n_neighbors=3)knn.fit(binary_features,target)#logisticlogistic = LogisticRegression(C=3,solver='liblinear')logistic.fit(binary_features, target)#Naive BayesNB_bern = BernoulliNB()NB_bern.fit(binary_features,target)#Support Vector Machines Classifiersvc = SVC(probability = True)svc.fit(binary_features, target)#decision treedecisiontree = DecisionTreeClassifier()decisiontree.fit(binary_features,target)#forestforest=RandomForestClassifier(n_estimators=100)forest.fit(binary_features,target)#XGBoostgbm = xgb.XGBClassifier(n_estimators=1300,                        max_depth=9,                        learning_rate=0.54,                        gamma = 1.3,                        subsample=0.9,                        min_child_weight=1,                        colsample_bytree=0.9)eval_set=[(X_train,y_train),(X_test,y_test)]fit_model = gbm.fit(                     X_train, y_train,                     eval_set=eval_set,                    eval_metric='error',                    early_stopping_rounds=50,                    verbose=False                   )###################################################################def forest_prediction(description):     sample_test_df = pd.DataFrame({'description': [description]})    word_finder_matrix(sample_test_df)    return forest.predict([sample_test_df.iloc[0,1:]])[0]def xgb_prediction(description):     sample_test_df = pd.DataFrame({'description': [description]})    word_finder_matrix(sample_test_df)    del sample_test_df['description']    return gbm.predict(sample_test_df)[0]########################################################################################Cleaned model#################################def all_predict(description):     sample_test_df = pd.DataFrame({'description': [description]})    word_finder_matrix(sample_test_df)    for_pred = forest_prediction(description)    xgb_pred = xgb_prediction(description)    predictions = [for_pred, for_pred, knn.predict([sample_test_df.iloc[0,1:]])[0],                   logistic.predict([sample_test_df.iloc[0,1:]])[0],NB_bern.predict([sample_test_df.iloc[0,1:]])[0],                  svc.predict([sample_test_df.iloc[0,1:]])[0],decisiontree.predict([sample_test_df.iloc[0,1:]])[0],                  xgb_pred, xgb_pred]    us_counts = predictions.count('US')    fr_counts = predictions.count('France')    if us_counts > fr_counts:        return 'US'    return 'France'####################################################################Imagesfrom PIL import Image french_img  = Image.open('parisian.jpg') us_img  = Image.open('CowboyGuy.jpg') #########################################################################################################################################################Streamlit Functions    st.title('What am I drinking?')st.markdown(' ## We can help you determine if your chardonnay is from France or the United States.')client_response = st.text_input('In the most pompous and scientific way possible, describe your chardonnay for me.')button = st.button('Guess!')if button:     if all_predict(client_response) == 'France':        print( st.image(french_img, use_column_width=True, caption = 'Zis wine is probably from France!'))    if all_predict(client_response) == 'US':        print( st.image(us_img, use_column_width=True, caption = 'Howdy stranger, this wine must be from right here in America.'))                                                                        